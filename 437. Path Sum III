/**
 * Problem:
 * Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.
 * The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    private int ans=0;
    public int PathSum(TreeNode root, int targetSum) {
        pathh(root,targetSum);
        return ans;
    }
    
    private void pathh(TreeNode node,int target)
    {
        if(node==null)
            return;
        checksum(node,target);
        pathh(node.left,target);
        pathh(node.right,target);
    }
    
    private void checksum(TreeNode node,int target)
    {
        if(node==null)
            return;
        if(target==node.val)
            ans+=1;
        Console.WriteLine(node.val+" "+target);
        checksum(node.left,target-node.val);
        checksum(node.right,target-node.val);
    }
}
