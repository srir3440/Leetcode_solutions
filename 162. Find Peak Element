/**
 * Problem:
 * A peak element is an element that is strictly greater than its neighbors.

 * Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

 * You may imagine that nums[-1] = nums[n] = -âˆž.

 * You must write an algorithm that runs in O(log n) time.
 */
 public class Solution {
    public int FindPeakElement(int[] nums) {
        if(nums.Length==1)
            return 0;
        int left=0,right=nums.Length-1,mid;
        while(left<=right)
        {
            mid=(left+right)/2;
            Console.WriteLine(mid);
            if((mid!=0 && mid!=nums.Length-1 && nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]) || (mid==0 && nums[0]>nums[1]) || (mid==nums.Length-1 && nums[mid]>nums[mid-1]))
               return mid;
            else if(mid==0 || (nums[mid+1]>nums[mid-1]))
               left=mid+1;
            else if(mid==nums.Length-1 || nums[mid+1]<=nums[mid-1])
               right=mid-1;
        }
        return right;
    }
}
