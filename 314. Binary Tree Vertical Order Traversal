/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class treen
{
    public TreeNode node;
    public int index;
    public treen(TreeNode node,int index)
    {
        this.node=node;
        this.index=index;
    }
}

public class Solution {
    private SortedDictionary<int,List<int>> dict=new SortedDictionary<int,List<int>>();
    private IList<IList<int>> ans=new List<IList<int>>();
    private int cntleft,cntright;
    public IList<IList<int>> VerticalOrder(TreeNode root) {
        if(root==null)
            return new List<IList<int>>();
        lcount(root,-1);
        Queue<treen> queue=new Queue<treen>();
        queue.Enqueue(new treen(root,cntleft));
        while(queue.Count!=0)
        {
            for(int i=queue.Count;i>0;i--)
            {
                treen tmp=queue.Dequeue();
                if(!dict.ContainsKey(tmp.index))
                    dict.Add(tmp.index,new List<int>());
                dict[tmp.index].Add(tmp.node.val);
                if(tmp.node.left!=null)
                    queue.Enqueue(new treen(tmp.node.left,tmp.index-1));
                if(tmp.node.right!=null)
                    queue.Enqueue(new treen(tmp.node.right,tmp.index+1));
            }
        }
        foreach(var key in dict.Keys)
            ans.Add(dict[key]);
        return ans;
    }
    
    private void lcount(TreeNode node,int cnt)
    {
        if(node==null)
        {
            cntleft=cnt;
            return;
        }
        lcount(node.left,cnt+1);
    }
    
    private void rcount(TreeNode node,int cnt)
    {
        if(node==null)
        {
            cntright=cnt;
            return;
        }
        rcount(node.right,cnt+1);
    }
}
