/**
 * Problem:
 * Given a string s, return the longest palindromic substring in s.
 */
public class Solution {
    public string LongestPalindrome(string s) {
        bool[,] opt=new bool[s.Length+1,s.Length+1];
        int i,j,l;
        string pal="";
        for(i=1;i<=s.Length;i++)
        {
            for(j=1;j<=s.Length;j++)
            {
                if(i==j)
                    opt[i,j]=true;
                else if(i+1==j)
                    opt[i,j]=(s[i-1]==s[j-1]);
            }
        }
        for(l=2;l<=s.Length;l++)
        {
            for(i=1;i<=s.Length-l;i++)
            {
                j=i+l;
                if(s[i-1]==s[j-1])
                {
                    opt[i,j]=opt[i+1,j-1];
                    if(opt[i,j])
                        pal=s.Substring(i-1,j-i+1);
                }    
            }
        }
        for(l=0;l<=s.Length;l++)
        {
            for(i=1;i<=s.Length-l;i++)
            {
                j=i+l;
                if(opt[i,j])
                    pal=s.Substring(i-1,j-i+1);
            }
        }
        return pal;
    }
}
