public class obj
{
    public int index;
    public int val;
    public obj(int index,int val)
    {
        this.index=index;
        this.val=val;
    }
}

public class customComparer:Comparer<obj>
{
    public override int Compare(obj a,obj b)
    {
        if(a.val.CompareTo(b.val)!=0)
            return -a.val.CompareTo(b.val);
        if(a.index.CompareTo(b.index)!=0)
            return -a.index.CompareTo(b.index);
        return 0;
    }
}

public class MaxStack {
    private SortedDictionary<obj,LinkedListNode<obj>> maxheap;
    private LinkedList<obj> mainstack;
    private int index=0;
    public MaxStack() {
        maxheap=new SortedDictionary<obj,LinkedListNode<obj>>(new customComparer());
        mainstack=new LinkedList<obj>();
        index=0;
    }
    
    public void Push(int x) {
        index+=1;
        obj temp=new obj(index,x);
        mainstack.AddLast(temp);
        maxheap.Add(temp,mainstack.Last);
    }
    
    public int Pop() {
        obj temp=mainstack.Last.Value;
        maxheap.Remove(temp);
        mainstack.RemoveLast();
        return temp.val;
    }
    
    public int Top() {
        return mainstack.Last.Value.val;
    }
    
    public int PeekMax() {
        obj temp=maxheap.Keys.ToList()[0];
        return temp.val;
    }
    
    public int PopMax() {
        obj temp=maxheap.Keys.ToList()[0];
        mainstack.Remove(maxheap[temp]);
        maxheap.Remove(temp);
        return temp.val;
    }
}

/**
 * Your MaxStack object will be instantiated and called as such:
 * MaxStack obj = new MaxStack();
 * obj.Push(x);
 * int param_2 = obj.Pop();
 * int param_3 = obj.Top();
 * int param_4 = obj.PeekMax();
 * int param_5 = obj.PopMax();
 */
