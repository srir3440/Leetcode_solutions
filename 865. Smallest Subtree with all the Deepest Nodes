/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    private TreeNode ans=null;
    private int max=0;
    public TreeNode SubtreeWithAllDeepest(TreeNode root) {
        traverse(root,1);
        return ans;
    }
    
    private int traverse(TreeNode node,int depth)
    {
        if(node==null)
            return depth-1;
        int leftdepth=traverse(node.left,depth+1);
        int rightdepth=traverse(node.right,depth+1);
        //Console.WriteLine(leftdepth+" "+rightdepth+" "+node.val);
        if(leftdepth==rightdepth && max<=leftdepth)
        {
            ans=node;
            max=leftdepth;
        }
        return Math.Max(leftdepth,rightdepth);
    }
}
