/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        int len1=len(l1),len2=len(l2);
        if(len1<len2)
            l1=padzeros(l1,len2-len1);
        else
            l2=padzeros(l2,len1-len2);
        ListNode newhead=null,curr=null,curr1=l1,curr2=l2;
        int sum=0,carry=0;
        while(curr1!=null)
        {
            sum=curr1.val+curr2.val+carry;
            carry=0;
            if(sum>9)
            {
                carry=1;
                sum-=10;
            }
            ListNode tmp=new ListNode(sum);
            if(curr!=null)
            {
                curr.next=tmp;
                curr=curr.next;
            }
                
            else
                curr=tmp;
            if(newhead==null)
                newhead=curr;
            curr1=curr1.next;
            curr2=curr2.next;
        }
        if(carry==1)
            curr.next=new ListNode(1);
        //Console.WriteLine("sss");
        return newhead;
    }
    
    private ListNode padzeros(ListNode head,int n)
    {
        int i=0;
        ListNode curr=head;
        while(curr.next!=null)
            curr=curr.next;
        while(i<n)
        {
            curr.next=new ListNode(0);
            curr=curr.next;
            i++;
        }
        return head;
    }
    
    private int len(ListNode head)
    {
        ListNode curr=head;
        int len=0;
        while(curr!=null)
        {
            len++;
            curr=curr.next;
        }
        return len;
    }
}
