public class Solution {
    public int OrangesRotting(int[][] grid) {
        Queue<int[]> queue=new Queue<int[]>();
        HashSet<string> visited=new HashSet<string>();
        for(int i=0;i<grid.Length;i++)
        {
            for(int j=0;j<grid[i].Length;j++)
            {
                if(grid[i][j]==2)
                {
                    queue.Enqueue(new int[]{i,j});
                    visited.Add(tostring(i,j));
                }    
            }
        }
        int cnt=-1;
        while(queue.Count!=0)
        {
            cnt++;
            for(int i=queue.Count;i>0;i--)
            {
                int[] temp=queue.Dequeue();
                addtoqueue(temp[0]-1,temp[1],grid,visited,queue);
                addtoqueue(temp[0],temp[1]-1,grid,visited,queue);
                addtoqueue(temp[0]+1,temp[1],grid,visited,queue);
                addtoqueue(temp[0],temp[1]+1,grid,visited,queue);
            }
        }
        bool flag=true;
        for(int i=0;i<grid.Length;i++)
        {
            for(int j=0;j<grid[i].Length;j++)
            {
                if(grid[i][j]==1)
                    return -1;
                else if(grid[i][j]==2)
                    flag=false;
            }
        }
        if(flag)
            return 0;
        return cnt;
    }
    
    
    private string tostring(int i,int j)
    {
        return i+ToString()+" "+j.ToString();
    }
    
    private void addtoqueue(int i,int j,int[][] grid,HashSet<string> visited,Queue<int[]> queue)
    {
        if(i<0 || i>=grid.Length || j<0 || j>=grid[i].Length || visited.Contains(tostring(i,j)) || grid[i][j]!=1)
            return;
        visited.Add(tostring(i,j));
        queue.Enqueue(new int[]{i,j});
        grid[i][j]=2;
    }
}
