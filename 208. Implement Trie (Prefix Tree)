public class TrieNode
{
    public bool isend;
    public string prefix;
    public Dictionary<char,TrieNode> children;
    public TrieNode(string prefix="")
    {
        this.isend=false;
        this.prefix=prefix;
        this.children=null;
    }
}


public class Trie {
    private TrieNode root; 
    public Trie() {
        root=new TrieNode();
    }
    
    public void Insert(string word) {
        TrieNode tmp=root;
        for(int i=0;i<word.Length;i++)
        {
            if(tmp.children==null)
                tmp.children=new Dictionary<char,TrieNode>();
            if(!tmp.children.ContainsKey(word[i]))
                tmp.children.Add(word[i],new TrieNode(tmp.prefix+word[i]));
            tmp=tmp.children[word[i]];
        }
        tmp.isend=true;
    }
    
    public bool Search(string word) {
        TrieNode tmp=root;
        for(int i=0;i<word.Length;i++)
        {
            if(tmp.children==null || !tmp.children.ContainsKey(word[i]))
                return false;
            tmp=tmp.children[word[i]];
        }
            
        return tmp.isend;
    }
    
    public bool StartsWith(string prefix) {
        TrieNode tmp=root;
        for(int i=0;i<prefix.Length;i++)
        {
            //printchildren(tmp);
            if(tmp.children==null || !tmp.children.ContainsKey(prefix[i]))
                return false;
            tmp=tmp.children[prefix[i]];
        }
        return true;
    }
    
    private void printchildren(TrieNode node)
    {
        if(node.children==null)
            return;
        foreach(var key in node.children.Keys)
            Console.Write(key+" ");
        Console.WriteLine();
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */
