/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    private List<int> t1=new List<int>();
    private bool ans=true;
    private int cnt=0;
    public bool LeafSimilar(TreeNode root1, TreeNode root2) {
        dfs(root1);
        //foreach(var i in t1)
            //Console.Write(i+" ");
        //Console.WriteLine();
        dfscheck(root2);
        //Console.WriteLine();
        
        if(cnt<t1.Count)     // case when tree 2 has less leaves than tree 1
            ans=false;
        return ans;
    }
    
    private void dfs(TreeNode node)
    {
        if(node==null)
            return;
        
        dfs(node.left);
        dfs(node.right);
        
        if(node.left==null && node.right==null)
            t1.Add(node.val);
        
    }
    
    private void dfscheck(TreeNode node)
    {
        if(node==null || !ans)
            return;
        
        dfscheck(node.left);
        dfscheck(node.right);
        
        if(node.left==null && node.right==null)
        {
            //Console.Write(node.val+" ");
            if(cnt>=t1.Count || t1[cnt]!=node.val)    // case when tree2 has more leaves than tree 1 or leaf sequence is not in order
                ans=false;
            cnt++;
        }
            
        
    }
}
