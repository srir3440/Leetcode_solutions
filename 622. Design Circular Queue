public class MyCircularQueue {
    private int[] queue;
    private int front,rear;
    public MyCircularQueue(int k) {
        queue=new int[k];
        front=-1;
        rear=-1;
        for(int i=0;i<k;i++)
            queue[i]=-1;
    }
    
    public bool EnQueue(int value) {
        if(IsFull())
            return false;
        if(IsEmpty())
            front=0;
        rear=(rear+1)%queue.Length;
        queue[rear]=value;
        //Console.WriteLine(front+" "+rear+" "+queue[rear]);
        return true;
    }
    
    public bool DeQueue() {
        if(IsEmpty())
            return false;
        queue[front]=-1;
        front=(front+1)%queue.Length;
        if(IsFull())
        {
            front=-1;
            rear=-1;
        }
        return true;
    }
    
    public int Front() {
        if(IsEmpty())
            return -1;
        return queue[front];
    }
    
    public int Rear() {
        if(IsEmpty())
            return -1;
        return queue[rear];
    }
    
    public bool IsEmpty() {
        if(rear==-1)
            return true;
        return false;
    }
    
    public bool IsFull() {
        if((rear+1)%queue.Length==front)
            return true;
        return false;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * bool param_1 = obj.EnQueue(value);
 * bool param_2 = obj.DeQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * bool param_5 = obj.IsEmpty();
 * bool param_6 = obj.IsFull();
 */
