public class CustomComparer:Comparer<int[]>
{
    public override int Compare(int[] a,int[] b)
    {
        if(a[0].CompareTo(b[0])!=0)
            return a[0].CompareTo(b[0]);
        return 0;
    }
}

public class Solution {
    public IList<int> PartitionLabels(string s) {
        int[,] chars=new int[26,2];
        for(int i=0;i<s.Length;i++)
        {
            if(chars[s[i]-'a',0]==0)
                chars[s[i]-'a',0]=i+1;
            chars[s[i]-'a',1]=i+1;
        }
        List<int[]> ll=new List<int[]>();
        for(int i=0;i<26;i++)
        {
            if(chars[i,0]!=0)
            {
                ll.Add(new int[]{chars[i,0],chars[i,1]});
                //Console.WriteLine(chars[i,0]+" "+chars[i,1]+" "+(char)('a'+i));
            }
        }
        return mergeintervals(ll);
        
    }
    
    
    private IList<int> mergeintervals(List<int[]> intervals)
    {
        intervals.Sort(new CustomComparer());
        IList<int> ans=new List<int>();
        List<int[]> merged=new List<int[]>();
        int[] temp=intervals[0];
        for(int i=1;i<intervals.Count;i++)
        {
            if(intervals[i][0]<=temp[1])
                temp[1]=Math.Max(intervals[i][1],temp[1]);
            else
            {
                merged.Add(temp);
                temp=intervals[i];
            }
        }
        merged.Add(temp);
        for(int i=0;i<merged.Count;i++)
        {
            //Console.WriteLine(merged[i][0]+" "+merged[i][1]);
            ans.Add(merged[i][1]-merged[i][0]+1);
        }
        return ans;
    }
}
