public class Solution {
    private string s; 
    private int m;
    private int[] st;
    private Dictionary<string,int> opt=new Dictionary<string,int>();
    
    public int MergeStones(int[] stones, int k) {
        
        m=k;
        st=stones;
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<stones.Length;i++)
            sb.Append(stones[i]+" ");
        s=sb.ToString();
        
        
        int ret=dfs(s);
        
        return ret==Int32.MaxValue?-1:ret;
        
        
    }
    
    private int dfs(string s)
    {
        
        string[] splits=s.Split(" ",StringSplitOptions.RemoveEmptyEntries);
        
        if(1==splits.Length)
            return 0;
        //Console.WriteLine(s+"    "+splits.Length);
        if(m>splits.Length)
            return Int32.MaxValue;
        
        string temp;
        int[] prefix=getprefixsum(splits,out temp);
        
        if(opt.ContainsKey(temp))
            return opt[temp];
        
        //if(m==splits.Length)
            //return prefix[prefix.Length-1];
        
        
        
        int min=Int32.MaxValue,rece;
        string tmp;
        for(int i=0;i<splits.Length-m+1;i++)
        {
            
            int su=prefix[i+m]-prefix[i];
            //Console.WriteLine("sds "+String.Join(" ",splits,0,i).Length+" "+(i+m)+" "+splits.Length+" "+su);
            tmp=String.Join(" ",splits,0,i)+" "+su.ToString()+" "+String.Join(" ",splits,i+m,splits.Length-i-m)+" ";
            rece=dfs(tmp);
            if(rece!=Int32.MaxValue)
                min=Math.Min(min,rece+su);
        }
        
        opt[temp]=min;
        
        return min;
    }
    
    private int[] getprefixsum(string[] splits,out string temp)
    {
        int[] p=new int[splits.Length+1];
        temp="";
        for(int i=1;i<=splits.Length;i++)
        {
            p[i]=p[i-1]+Int32.Parse(splits[i-1]);
            temp+=splits[i-1]+" ";
            //Console.Write(p[i]+" ");
        }
        
        //Console.WriteLine();
        
        return p;
    }
}
