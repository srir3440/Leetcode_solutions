public class Solution {
    private Queue<int[]> queue=new Queue<int[]>();
    private HashSet<string> visited=new HashSet<string>();
    public int ShortestDistance(int[][] maze, int[] start, int[] destination) {
        //Console.WriteLine("__________________________________________________________________________________________________________________");
        for(int i=0;i<4;i++)
        {
            queue.Enqueue(new int[]{start[0],start[1],i});
            visited.Add(tostring(new int[]{start[0],start[1],i}));    
        }
        int steps=-1;
        while(queue.Count!=0)
        {
            steps++;
            //Console.WriteLine(queue.Count);
            for(int i=queue.Count;i>0;i--)
            {
                int[] temp=queue.Dequeue();
                //Console.Write(temp[0]+" "+temp[1]+" "+temp[2]+"     ");
                int[] newpos=getindexgivendirection(temp);
                if(!isvalid(maze,newpos))
                {
                    if(destination[0]==temp[0] && destination[1]==temp[1])
                        return steps;
                    for(int j=0;j<4;j++)
                    {
                        int[] pos=getindexgivendirection(new int[]{temp[0],temp[1],j});
                        if(isvalid(maze,pos) && !visited.Contains(tostring(pos)))
                        {
                            visited.Add(tostring(pos));
                            queue.Enqueue(pos);
                        }    
                    }
                }
                else
                {
                    if(!visited.Contains(tostring(newpos)))
                    {
                        queue.Enqueue(newpos);
                        visited.Add(tostring(newpos));    
                    }
                }
            }
            //Console.WriteLine();
        }
        return -1;
    }
    
    private int[] getindexgivendirection(int[] b)
    {
        int[] a=new int[]{b[0],b[1],b[2]};
        if(a[2]==0)
            a[0]-=1;
        else if(a[2]==1)
            a[0]+=1;
        else if(a[2]==2)
            a[1]-=1;
        else
            a[1]+=1;
        return a;
    }
    
    private bool isvalid(int[][] maze,int[] a)
    {
        if(a[0]<0 || a[0]>=maze.Length || a[1]<0 || a[1]>=maze[a[0]].Length || maze[a[0]][a[1]]==1)
            return false;
        //visited.Add(tostring(a));
        return true;
    }
    
    private string tostring(int[] a)
    {
        return a[0].ToString()+" "+a[1].ToString()+" "+a[2].ToString();
    }
}
