public class Solution {
    private Queue<int> queue=new Queue<int>();
    private bool[] visited;
    private Dictionary<int,Dictionary<int,int>> valuesMap=new Dictionary<int,Dictionary<int,int>>();
    public int MinJumps(int[] arr) {
        fillMap(arr);
        visited=new bool[arr.Length];
        queue.Enqueue(0);
        visited[0]=true;
        int step=-1;
        while(queue.Count!=0)
        {
            step++;
            for(int i=queue.Count;i>0;i--)
            {
                int tmp=queue.Dequeue();
                if(tmp==arr.Length-1)
                    return step;
                visited[tmp]=true;
                
                if(!visited[tmp+1])
                    queue.Enqueue(tmp+1);
                if(tmp-1>=0 && !visited[tmp-1])
                    queue.Enqueue(tmp-1);
                 
                if(!valuesMap.ContainsKey(arr[tmp]))
                    continue;
                foreach(var j in valuesMap[arr[tmp]].Keys)
                {
                    if(j!=tmp && !visited[j])
                    {
                        queue.Enqueue(j);
                        //valuesMap[arr[tmp]].Remove(j);
                    }
                }
                valuesMap.Remove(arr[tmp]);
            }
        }
        
        return -1;
    }
    
    private void fillMap(int[] arr)
    {
        for(int i=0;i<arr.Length;i++)
        {
            if(!valuesMap.ContainsKey(arr[i]))
                valuesMap.Add(arr[i],new Dictionary<int,int>());
            valuesMap[arr[i]].Add(i,i);
        }
        
        /*foreach(var key in valuesMap.Keys)
        {
            Console.Write(key+" ");
            for(int i=0;i<valuesMap[key].Count;i++)
                Console.Write(valuesMap[key][i]+" ");
            Console.WriteLine();
        }*/
    }
}
