public class Solution {
    public int MaxSubarraySumCircular(int[] nums) {
        
        
        //normal sum - dp
        int[] opt=new int[nums.Length+1];
        int normMax=Int32.MinValue;
        for(int i=1;i<=nums.Length;i++)
        {
            opt[i]=Math.Max(opt[i-1],0)+nums[i-1];
            normMax=Math.Max(opt[i],normMax);
        }
        
        //special sum - that wraps around
        int[] suffixSum=new int[nums.Length];
        int[] maxSuffixAfter=new int[nums.Length];
        suffixSum[nums.Length-1]=nums[nums.Length-1];
        maxSuffixAfter[nums.Length-1]=nums[nums.Length-1];
        
        for(int i=nums.Length-2;i>=0;i--)
        {
            suffixSum[i]=suffixSum[i+1]+nums[i];
            maxSuffixAfter[i]=Math.Max(suffixSum[i],maxSuffixAfter[i+1]);
        }
            
        int prefixSum=0,specMax=Int32.MinValue;
        for(int i=1;i<nums.Length;i++)
        {
            prefixSum+=nums[i-1];
            specMax=Math.Max(specMax,prefixSum+maxSuffixAfter[i]);
        }
        
        return Math.Max(normMax,specMax);
    }
}
