public class item
{
    public int freq;
    public int val;
    public item(int f,int v)
    {
        this.freq=f;
        this.val=v;
    }
}

public class LFUCache {
    private Dictionary<int,LinkedList<int>> freqmap;
    private Dictionary<int,item> keyfreqmap;
    private Dictionary<int,LinkedListNode<int>> keynodemap;
    private int capacity;
    private int leastfreq;
    private bool valid;
    public LFUCache(int capacity) {
        freqmap=new Dictionary<int,LinkedList<int>>();
        keyfreqmap=new Dictionary<int,item>();
        keynodemap=new Dictionary<int,LinkedListNode<int>>();
        this.capacity=capacity;
        this.valid=capacity<=0?false:true;
        freqmap.Add(0,new LinkedList<int>());
        leastfreq=0;
    }
    
    public int Get(int key) {
        //Console.Write(capacity+" ");
        if(!valid || !keyfreqmap.ContainsKey(key))
        {
            //print();
            return -1;
        }
            
        
        keyfreqmap[key].freq++;
        int freqTemp=keyfreqmap[key].freq;
        AddNodeToNewList(freqTemp-1,freqTemp,keynodemap[key]);
        //print();
        return keyfreqmap[key].val;
    }
    
    public void Put(int key, int value) {
        
        
        if(!valid)
            return;
        
        if(!keyfreqmap.ContainsKey(key))
        {
            if(capacity==0)
            {
                capacity=1;
                Evict();
            }
            
            capacity--;
            keyfreqmap.Add(key,new item(0,value));
            keynodemap.Add(key,new LinkedListNode<int>(key));
            freqmap[0].AddFirst(keynodemap[key]);
        }
        
        keyfreqmap[key].freq++;
        keyfreqmap[key].val=value;
        int freqTemp=keyfreqmap[key].freq;
        AddNodeToNewList(freqTemp-1,freqTemp,keynodemap[key]);
        //print();
    }
    
    private void AddNodeToNewList(int oldfreq,int newfreq,LinkedListNode<int> node)
    {
        if(!freqmap.ContainsKey(newfreq))
            freqmap.Add(newfreq,new LinkedList<int>());
        
        // push node to next frequency
        freqmap[oldfreq].Remove(node);
        freqmap[newfreq].AddLast(node);
        
        // modify the least frequency in cache for eviction
        if(freqmap[oldfreq].Count==0 && oldfreq==leastfreq)
            leastfreq=newfreq;
        else
            leastfreq=Math.Min(leastfreq,newfreq);
    }
    
    private void Evict()
    {
        LinkedListNode<int> node=freqmap[leastfreq].First;
        freqmap[leastfreq].RemoveFirst();
        keyfreqmap.Remove(node.Value);
        keynodemap.Remove(node.Value);
    }
    
    private void print()
    {
        foreach(var key in freqmap.Keys)
        {
            Console.Write(key+"   ");
            if(freqmap[key].Count==0)
            {
                Console.WriteLine();
                continue;
            }
            LinkedListNode<int> curr=freqmap[key].First;
            while(curr!=null)
            {
                Console.Write(curr.Value+" ");
                curr=curr.Next;
            }
            Console.WriteLine();
        }
        Console.WriteLine("least freq: "+leastfreq);
        Console.WriteLine();
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.Get(key);
 * obj.Put(key,value);
 */
