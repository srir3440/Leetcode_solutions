public class Solution {
    private List<int[]> intervals=new List<int[]>(); 
    public string AddBoldTag(string s, string[] words) {
        for(int i=0;i<words.Length;i++)
        {
            //Console.WriteLine(words[i]);
            int start=0;
            while(true)
            {
                int j=s.IndexOf(words[i],start);
                if(j==-1)
                    break;
                //Console.Write(j+" "+(j+words[i].Length)+"    ");
                intervals.Add(new int[]{j,j+words[i].Length});
                start=j+1;
            }
            //Console.WriteLine();
        }
        intervals=mergeintervals(intervals);
        StringBuilder sb=new StringBuilder(s);
        int offset=0;
        foreach(var item in intervals)
        {
            //Console.WriteLine(item[0]+" "+item[1]);
            sb=sb.Insert(item[0]+offset,"<b>");
            offset+=3;
            sb=sb.Insert(item[1]+offset,"</b>");
            offset+=4;
        }
        return sb.ToString();
    }
    
    private List<int[]> mergeintervals(List<int[]> intervals)
    {
        if(intervals.Count==0)
            return new List<int[]>();
        PriorityQueue<int[],int> minheap=new PriorityQueue<int[],int>();
        List<int[]> list=new List<int[]>();
        for(int i=0;i<intervals.Count;i++)
            minheap.Enqueue(intervals[i],intervals[i][0]);
        int start=minheap.Peek()[0],end=minheap.Peek()[1];
        while(minheap.Count!=0)
        {
            int[] temp=minheap.Dequeue();
            if(temp[0]<=end)
            {
                end=Math.Max(end,temp[1]);   
            }
            else
            {
                list.Add(new int[]{start,end});
                start=temp[0];
                end=temp[1];
            }     
        }
        list.Add(new int[]{start,end});
        return list;
    }
    
    
}
