/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    private List<int> left=new List<int>();
    private List<int> right=new List<int>();
    private List<int> leaves=new List<int>();
    public IList<int> BoundaryOfBinaryTree(TreeNode root) {
        if(root==null)
            return null;
        List<int> ans=new List<int>();
        ans.Add(root.val);
        if(root.left==null && root.right==null)
            return ans;
        if(root.left!=null)
            findleft(root);
        ans.AddRange(left);
        traverse(root);
        ans.AddRange(leaves);
        if(root.right!=null)
            findright(root);
        ans.AddRange(reverse(right));
        return ans;
    }
    
    private void findleft(TreeNode node)
    {
        //Console.WriteLine(node.val+" "+left.Count);
        if(node.left==null && node.right==null)
        {
            left.RemoveAt(left.Count-1);
            return;
        }
        if(node.left!=null)
        {
            
            left.Add(node.left.val);
            //Console.WriteLine("left"+" "+node.val+" "+left.Count);
            findleft(node.left);
        }   
        else if(node.right!=null)
        {
            
            left.Add(node.right.val);
            //Console.WriteLine("right"+" "+node.val+" "+left.Count);
            findleft(node.right);
        }  
    }
    
    private void findright(TreeNode node)
    {
        Console.WriteLine(node.val+" "+right.Count);
        if(node.left==null && node.right==null)
        {
            right.RemoveAt(right.Count-1);
            return;
        }
        if(node.right!=null)
        {
            
            right.Add(node.right.val);
            //Console.WriteLine("right"+" "+node.val+" "+right.Count);
            findright(node.right);
        }   
        else if(node.left!=null)
        {
            
            right.Add(node.left.val);
            //Console.WriteLine("left"+" "+node.val+" "+right.Count);
            findright(node.left);
        }  
    } 
    
    private List<int> reverse(List<int> a)
    {
        for(int i=0,j=a.Count-1;i<=j;i++,j--)
        {
            int tmp=a[i];
            a[i]=a[j];
            a[j]=tmp;
        }
        return a;
    }
    
    
    private void traverse(TreeNode node)
    {
        if(node==null)
            return;
        if(node.left==null && node.right==null)
        {
            leaves.Add(node.val);
            return;
        }
        traverse(node.left);
        traverse(node.right);
    }
}
