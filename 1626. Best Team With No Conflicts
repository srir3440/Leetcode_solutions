public class customComparer:Comparer<int[]>
{
    public override int Compare(int[] a,int[] b)
    {
        if(a[0].CompareTo(b[0])!=0)
            return -a[0].CompareTo(b[0]);
        if(a[1].CompareTo(b[1])!=0)
            return -a[1].CompareTo(b[1]);
        return 0;
    }
}

public class Solution {
    private PriorityQueue<int,int[]> maxheap=new PriorityQueue<int,int[]>(new customComparer());
    private int[] indexes,s,a;
    private int[] opt;
    public int BestTeamScore(int[] scores, int[] ages) {
        opt=new int[scores.Length];
        indexes=new int[scores.Length];
        s=scores;
        a=ages;
        SortAndPopulate();
        
        int max=Int32.MinValue;
        for(int i=0;i<indexes.Length;i++)
            max=Math.Max(max,dfs(i));
        
        return max;
    }
    
    private int dfs(int start)
    {
        //Console.WriteLine(start);
        if(start>=indexes.Length)
            return 0;
        
        if(opt[start]!=0)
            return opt[start];
            
        int max=0;
        for(int i=start+1;i<indexes.Length;i++)
        {
            if(s[indexes[start]]>=s[indexes[i]] && a[indexes[start]]>=a[indexes[i]])
                max=Math.Max(max,dfs(i));
        }
        
        //Console.WriteLine("max: "+(max+s[indexes[start]]));
        opt[start]=max+s[indexes[start]];
        return opt[start];
    }
    
    private void SortAndPopulate()
    {
        int i;
        for(i=0;i<s.Length;i++)
            maxheap.Enqueue(i,new int[]{s[i],a[i]});
        
        i=0;
        while(maxheap.Count!=0)
            indexes[i++]=maxheap.Dequeue();
            
        /*for(i=0;i<s.Length;i++)
            Console.Write(indexes[i]+" ");
        Console.WriteLine();*/
    }
}
