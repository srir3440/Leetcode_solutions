public class Solution {
    private Dictionary<int,Dictionary<int,int>> adjlist=new Dictionary<int,Dictionary<int,int>>(); 
    private int[,] opt;
    private string label;
    private int[] ans;
    public int[] CountSubTrees(int n, int[][] edges, string labels) {
        opt=new int[n,26];
        label=labels;
        ans=new int[n];
        
        prepareAdjList(edges);
        
        dfs(0);
        
        for(int i=0;i<n;i++)
            ans[i]=opt[i,label[i]-'a'];
        
        return ans;
    }
    
    private void dfs(int node)
    {
        //Console.WriteLine(node);
        
        opt[node,label[node]-'a']++;
        
        if(!adjlist.ContainsKey(node))
            return;
        
        foreach(var key in adjlist[node].Keys)
        {
            adjlist[node].Remove(key);
            adjlist[key].Remove(node);
            dfs(key);
            for(int j=0;j<26;j++)
                opt[node,j]+=opt[key,j];
        }
        
        /*for(int i=0;i<26;i++)
            Console.Write(opt[node,i]+" ");
        Console.WriteLine();*/
    }
    
    private void prepareAdjList(int[][] edges)
    {
        for(int i=0;i<edges.Length;i++)
        {
            if(!adjlist.ContainsKey(edges[i][0]))
                adjlist.Add(edges[i][0],new Dictionary<int,int>());
            adjlist[edges[i][0]].Add(edges[i][1],edges[i][1]);
            if(!adjlist.ContainsKey(edges[i][1]))
                adjlist.Add(edges[i][1],new Dictionary<int,int>());
            adjlist[edges[i][1]].Add(edges[i][0],edges[i][0]);
        }
        
        /*foreach(var key in adjlist.Keys)
        {
            Console.Write(key+":  ");
            foreach(var val in adjlist[key])
                Console.Write(val+" ");
            Console.WriteLine();
        }
        Console.WriteLine();*/
    }
}
