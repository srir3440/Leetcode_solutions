public class customComparer:Comparer<int[]>
{
    public override int Compare(int[] a,int[] b)
    {
        if(a[0].CompareTo(b[0])!=0)
            return a[0].CompareTo(b[0]);
        else
        {
            if(a[1].CompareTo(b[1])!=0)
                return a[1].CompareTo(b[1]);
            return 0;
        }
    }
}

public class Solution {
    
    private PriorityQueue<int,int[]> minheap=new PriorityQueue<int,int[]>(new customComparer());
    private int[] st,et;
    public int JobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
        st=startTime;
        et=endTime;
        int[] sortedEt=new int[endTime.Length];
        int i;
        for(i=0;i<endTime.Length;i++)
            minheap.Enqueue(i,new int[]{endTime[i],i});
        
        i=0;
        while(minheap.Count!=0)
        {
            sortedEt[i++]=minheap.Dequeue();
            //Console.Write(sortedEt[i-1]+" ");
        }
            
        
        //Console.WriteLine();
        
        int[] p=new int[endTime.Length];       // largest job p that has endTime[p] <= startTime[i]
        
        for(i=0;i<endTime.Length;i++)
        {
            p[i]= binsearch(sortedEt,startTime[sortedEt[i]]);
            //Console.Write(p[i]+" ");
        }
        
        //Console.WriteLine();
        
        
        int[] opt=new int[startTime.Length+1];
        
        for(i=1;i<=startTime.Length;i++)
        {
            //Console.WriteLine((i-1)+" "+(p[i-1]==-1?0:p[i-1]+1)+" "+sortedEt[i-1]);
            opt[i]=Math.Max(opt[i-1],opt[p[i-1]==-1?0:p[i-1]+1]+profit[sortedEt[i-1]]); 
        }
            
        
        return opt[startTime.Length];
    }
    
    private int binsearch(int[] arr,int target)
    {
        int left=0,right=arr.Length,mid,par=-1;
        
        while(left<=right)
        {
            mid=(left+right)/2;
            if(et[arr[mid]]>target)
                right=mid-1;
            else
            {
                par=mid;
                left=mid+1;
            }
        }
        
        if(par==-1)
            return par;
        return par;
        
        
    }
}
