class Solution {
    public long smallestNumber(long n) {
        
        if (n == 0)
            return n;
        
        PriorityQueue<Long> minHeap = new PriorityQueue();
        PriorityQueue<Long> maxHeap = new PriorityQueue(Comparator.reverseOrder());
        int zeroCount = 0;
        long ans = 0;
        
        if (n >= 0) {
            
            while (n != 0) {   
                
                long r = n % 10;
                if (r == 0)
                    zeroCount++;
                else
                    minHeap.add(r);
                
                n = n / 10;
            }
            
            ans = ans * 10 + minHeap.poll();
             
            while (zeroCount-- != 0) {
                ans = ans * 10;
            }
            
            while (!minHeap.isEmpty()) {
                    ans = ans * 10 + minHeap.poll();
            }
            
        } else {
            
            n = - n;
            while (n != 0) {      
                //System.out.println(n + " " + n % 10);
                maxHeap.add(n % 10);
                n = n / 10;
            }
            while (!maxHeap.isEmpty()) {
                    ans = ans * 10 + maxHeap.poll();
            }
            ans = -ans;
        }
        
        return ans;
    
    }
}
