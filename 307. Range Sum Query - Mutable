public class SegmentTree
{
    private int[] tree;
    public int len;
    
    public SegmentTree(int[] arr)
    {
        len=0;
        while(arr.Length>(int)Math.Pow(2,len))
            len++;
        
        tree=new int[(int)Math.Pow(2,len+1)-1];
        this.len=arr.Length-1;
        buildTree(arr,0,this.len,0);
        
        
    }
    
    private int buildTree(int[] arr,int start,int end,int index)
    {
        if(start==end)
        {
            tree[index]=arr[start];
            return tree[index];
        }
        
        int mid=(start+end)/2;
        tree[index]= buildTree(arr,start,mid,2*index+1) + buildTree(arr,mid+1,end,2*index+2);
        return tree[index];
    }
    
    public int rangeSumQuery(int s1,int e1,int s2,int e2,int index=0)
    {
        if(Math.Max(s1,s2)>Math.Min(e1,e2))
            return 0;
        
        if(s1<=s2 && e2<=e1)
            return tree[index];
        
        int mid=(s2+e2)/2;
        return rangeSumQuery(s1,e1,s2,mid,2*index+1) + rangeSumQuery(s1,e1,mid+1,e2,2*index+2);
    }
    
    public int UpdateValue(int index,int val,int start,int end,int i=0)
    {
        int diff=0;
        //Console.WriteLine(start+" "+end+" "+index+" "+i);
        if(start==index && end==index)
        {
            diff=val-tree[i];
            tree[i]=val;
            return diff;
        }
        
        if(index<start && index>end)
            return 0;
        
        int mid=(start+end)/2;
        if(start<=index && index<=mid)
            diff=UpdateValue(index,val,start,mid,2*i+1);
        else if(mid+1<=index && index<=end)
            diff=UpdateValue(index,val,mid+1,end,2*i+2);
        
        tree[i]+=diff;
        
        return diff;
    }
}


public class NumArray {
    private int[] arr;
    private SegmentTree st;
    public NumArray(int[] nums) {
        arr=nums;
        st=new SegmentTree(arr);
    }
    
    public void Update(int index, int val) {
        st.UpdateValue(index,val,0,st.len);
    }
    
    public int SumRange(int left, int right) {
        return st.rangeSumQuery(left,right,0,st.len);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.Update(index,val);
 * int param_2 = obj.SumRange(left,right);
 */
