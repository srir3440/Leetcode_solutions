/**
 * Problem:
 * On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.
 * You can move according to these rules:
 *   In 1 second, you can either:
 *       move vertically by one unit,
 *       move horizontally by one unit, or
 *       move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
 *   You have to visit the points in the same order as they appear in the array.
 *   You are allowed to pass through points that appear later in the order, but these do not count as visits.
 */

public class Solution {
    public int MinTimeToVisitAllPoints(int[][] points) {
        int px=points[0][0],py=points[0][1];
        int stepx,stepy,opttime=0;
        for(int i=0;i<points.Length;i++)
        {
            stepx=(px<=points[i][0])?1:-1;
            stepy=(py<=points[i][1])?1:-1;
            while(px!=points[i][0] && py!=points[i][1])
            {
                px+=stepx;
                py+=stepy;
                opttime++;
            }
            while(px!=points[i][0])
            {
                px+=stepx;
                opttime++;
            }
            while(py!=points[i][1])
            {
                py+=stepy;
                opttime++;
            }
        }
        return opttime;
    }
}
