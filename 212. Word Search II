public class TrieNode{
    public string val;
    public Dictionary<char,TrieNode> children;
    public bool isend;
    public TrieNode(string val){
        this.val=val;
        children=new Dictionary<char,TrieNode>();
        this.isend=false;
    }
}


public class Solution {
    private HashSet<string> hs=new HashSet<string>();
    private HashSet<string> visited=new HashSet<string>();
    private TrieNode root=new TrieNode("");
    private char[][] b;
    public IList<string> FindWords(char[][] board, string[] words) {
        b=board;
        populatetrie(words);
        //print(root);
        for(int i=0;i<board.Length;i++)
        {
            for(int j=0;j<board[i].Length;j++)
            {
                
                dfs(i,j,root);
            }
        }
        //Console.WriteLine(hs.Count);
        return hs.ToList();
    }
    
    private void dfs(int i,int j,TrieNode node)
    {
        //Console.WriteLine(i+" "+j+" "+node.val);
        if(node.isend)
        {
            hs.Add(node.val);
            //node.isend=false;
        }
            
        if(!isvalid(i,j))
            return;
        if(!node.children.ContainsKey(b[i][j]))
            return;
        visited.Add(tostring(i,j));
        dfs(i,j-1,node.children[b[i][j]]);
        dfs(i-1,j,node.children[b[i][j]]);
        dfs(i,j+1,node.children[b[i][j]]);
        dfs(i+1,j,node.children[b[i][j]]);
        visited.Remove(tostring(i,j));
    }
    
    private string tostring(int a,int b)
    {
        return a.ToString()+" "+b.ToString();
    }
    
    private bool isvalid(int i,int j)
    {
        if(i<0 || i>=b.Length || j<0 || j>=b[i].Length || visited.Contains(tostring(i,j)))
            return false;
        return true;
    }
    
    private void populatetrie(string[] words)
    {
        TrieNode tmp;
        for(int i=0;i<words.Length;i++)
        {
            tmp=root;
            for(int j=0;j<words[i].Length;j++)
            {
                if(!tmp.children.ContainsKey(words[i][j]))
                    tmp.children.Add(words[i][j],new TrieNode(tmp.val+words[i][j]));
                tmp=tmp.children[words[i][j]];
            }
            tmp.isend=true;
        }
    }
    
    private void print(TrieNode node)
    {
        //Console.WriteLine(node.val);
        if(node.isend)
        {
            Console.WriteLine(node.val);
            return;
        }
        foreach(var key in node.children.Keys)
            print(node.children[key]);
    }
}
