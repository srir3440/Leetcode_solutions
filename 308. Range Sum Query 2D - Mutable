public class SegmentTree
{
    private int[,] tree;
    private int len1;
    private int len2;
    public int arrlen1;
    private int arrlen2;
    
    public SegmentTree(int[][] arr)
    {
        arrlen1=arr.Length-1;
        arrlen2=arr[0].Length-1;
        len1=0;
        len2=0;
        while(arr.Length>(int)Math.Pow(2,len1))
            len1++;
        while(arr[0].Length>(int)Math.Pow(2,len2))
            len2++;
        len1=(int)Math.Pow(2,len1+1)-1;
        len2=(int)Math.Pow(2,len2+1)-1;
        tree=new int[len1,len2];
        buildTree(arr,0,arr.Length-1,0);
    }
    
    private void buildTree(int[][] arr,int start,int end,int index)
    {
        
        if(start==end)
        {
            buildTree(arr[start],0,arr[start].Length-1,0,index);
            return;
        }
        int mid=(start+end)/2;
        buildTree(arr,start,mid,2*index+1);
        buildTree(arr,mid+1,end,2*index+2);
        
        for(int i=0;i<len2;i++)
            tree[index,i]=tree[2*index+1,i]+tree[2*index+2,i];
            
    }
    
    private int buildTree(int[] arr,int start,int end,int index,int row)
    {
        if(start==end)
        {
            tree[row,index]=arr[start];
            return arr[start];
        }
        int mid=(start+end)/2;
        tree[row,index]= buildTree(arr,start,mid,2*index+1,row) + buildTree(arr,mid+1,end,2*index+2,row);
        return tree[row,index];
    }
    
    public int sumQuery(int start,int end,int r1,int c1,int r2,int c2,int index)
    {
        //Console.WriteLine(start+" "+end+" "+r1+" "+r2);
        if(Math.Max(start,r1)>Math.Min(end,r2))
            return 0;
        
        if(r1<=start && end<=r2)
            return sumQuery(0,this.arrlen2,c1,c2,index,0);
        
        int mid=(start+end)/2;
        
        return sumQuery(start,mid,r1,c1,r2,c2,2*index+1) + sumQuery(mid+1,end,r1,c1,r2,c2,2*index+2);
    }
    
    private int sumQuery(int start,int end,int c1,int c2,int treeIndex,int index)
    {
        if(Math.Max(start,c1)>Math.Min(end,c2))
            return 0;
        if(c1<=start && end<=c2)
            return tree[treeIndex,index];
        
        int mid=(start+end)/2;
        return sumQuery(start,mid,c1,c2,treeIndex,2*index+1) + sumQuery(mid+1,end,c1,c2,treeIndex,2*index+2);
    }
    
    public void update(int r,int c,int start,int end,int index,int val)
    {
        Console.WriteLine(r+" "+c+" "+start+" "+end);
        if(start==end && r==start)
        {
            updateSubSegment(c,index,0,arrlen2,0,val);
            return;
        }
             
        
        int mid=(start+end)/2;
        
        if(start<=r && r<=mid)
            update(r,c,start,mid,2*index+1,val);
        else if(mid+1<=r && r<=end)
            update(r,c,mid+1,end,2*index+2,val);
        
        for(int i=0;i<len2;i++)
            tree[index,i]=tree[2*index+1,i]+tree[2*index+2,i];
        
    }
    
    private int updateSubSegment(int c,int treeIndex,int start,int end,int index,int val)
    {
        int diff=0;
        if(start==end && c==start)
        {
            diff=val-tree[treeIndex,index];
            tree[treeIndex,index]=val;
            return diff;
        }
        
        int mid=(start+end)/2;
        
        if(start<=c && c<=mid)
            diff=updateSubSegment(c,treeIndex,start,mid,2*index+1,val);
        else if(mid+1<=c && c<=end)
            diff=updateSubSegment(c,treeIndex,mid+1,end,2*index+2,val);
        
        tree[treeIndex,index]+=diff;
        return diff;
    }
    
}

public class NumMatrix {
    private SegmentTree st;
    public NumMatrix(int[][] matrix) {
        st=new SegmentTree(matrix);   
    }
    
    public void Update(int row, int col, int val) {
        st.update(row,col,0,st.arrlen1,0,val);
    }
    
    public int SumRegion(int row1, int col1, int row2, int col2) {
        return st.sumQuery(0,st.arrlen1,row1,col1,row2,col2,0);
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.Update(row,col,val);
 * int param_2 = obj.SumRegion(row1,col1,row2,col2);
 */
