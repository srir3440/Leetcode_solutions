/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class temp
{
    public int totalpaths;
    public int insufpaths;
    public temp()
    {
        totalpaths=0;
        insufpaths=0;
    }
}

public class Solution {
    private Dictionary<TreeNode,temp> paths=new Dictionary<TreeNode,temp>();
    private int l;
    public TreeNode SufficientSubset(TreeNode root, int limit) {
        l=limit;
        traverse(root,0);
        /*foreach(var key in paths.Keys)
            Console.WriteLine(key.val+" "+paths[key].totalpaths+" "+paths[key].insufpaths);
        Console.WriteLine("__________________________________");*/
        if(paths[root].insufpaths==paths[root].totalpaths)
            return null;
        deletenodes(root);
        return root;
    }
    
    private void traverse(TreeNode node,int sum)
    {
        if(node==null)
            return;
        traverse(node.left,sum+node.val);
        traverse(node.right,sum+node.val);
        paths.Add(node,new temp());
        visitallpaths(node,node,sum);
    }
    
    private void visitallpaths(TreeNode start,TreeNode node,int sum)
    {
        if(node==null)
            return;
        if(node.left==null && node.right==null)
        {
            if(sum+node.val<l)
                paths[start].insufpaths++;
            paths[start].totalpaths++;
            return;
        }
        visitallpaths(start,node.left,sum+node.val);
        visitallpaths(start,node.right,sum+node.val);
    }
    
    private void deletenodes(TreeNode node)
    {
        if(node==null)
            return;
        if(node.left!=null && paths[node.left].insufpaths==paths[node.left].totalpaths)
            node.left=null;
        if(node.right!=null && paths[node.right].insufpaths==paths[node.right].totalpaths)
            node.right=null;
        deletenodes(node.left);
        deletenodes(node.right);
    }
}
