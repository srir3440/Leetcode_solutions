public class SegmentTree
{
    public int[] tree;
    public int len;
    public SegmentTree(int[] arr)
    {
        int l=0;
        while(arr.Length>(int)Math.Pow(2,l))
            l++;
        tree=new int[(int)Math.Pow(2,l+1)-1];
        //Console.WriteLine(tree.Length);
        buildTree(arr,0,arr.Length-1,0);
        //for(int i=0;i<tree.Length;i++)
            //Console.Write(tree[i]+" ");
        this.len=arr.Length-1;
    }
    
    private int buildTree(int[] arr,int start,int end,int index)
    {
        if(start==end)
        {
            tree[index]=arr[start];
            return arr[start];
        }
        
        int mid=(start+end)/2;
        tree[index]=buildTree(arr,start,mid,2*index+1)+buildTree(arr,mid+1,end,2*index+2);
        return tree[index];
    }
    
    public int getSumQuery(int s1,int e1,int s2,int e2,int index)
    {
        //Console.WriteLine(s1+" "+e1+" "+s2+" "+e2);
        if(Math.Max(s1,s2)>Math.Min(e1,e2))
            return 0;
        if(s1<=s2 && e2<=e1)
            return tree[index];
        
        int mid=(s2+e2)/2;
        return getSumQuery(s1,e1,s2,mid,2*index+1) + getSumQuery(s1,e1,mid+1,e2,2*index+2);
    }
}


public class NumArray {
    private SegmentTree st;
    public NumArray(int[] nums) {
        st=new SegmentTree(nums);
    }
    
    public int SumRange(int left, int right) {
        return st.getSumQuery(left,right,0,st.len,0);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.SumRange(left,right);
 */
