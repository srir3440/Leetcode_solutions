/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class iter
{
    public Stack<TreeNode> stack;
    private bool isleft;
    public iter(TreeNode root,bool isleft)
    {
        stack=new Stack<TreeNode>();
        this.isleft=isleft;
        TreeNode node=root;
        while(node!=null)
        {
            stack.Push(node);
            node = isleft ? node.left : node.right;
        }
    }
    
    public void next()
    {
        
        TreeNode node= isleft ? this.stack.Pop().right : this.stack.Pop().left;
        
        while(node!=null)
        {
            stack.Push(node);
            node = isleft ? node.left : node.right;
        }
        
    }
}




public class Solution {
    public bool FindTarget(TreeNode root, int k) {
        iter i1=new iter(root,true);
        iter i2=new iter(root,false);
        
        while(i1.stack.Count!=0 && i2.stack.Count!=0)
        {
            int left=i1.stack.Peek().val,right=i2.stack.Peek().val;
            if(left>=right)
                return false;
            if(left+right==k)
                return true;
            if(left+right<k)
                i1.next();
            else if(left+right>k)
                i2.next();
        }
        
        return false;
    }
}
